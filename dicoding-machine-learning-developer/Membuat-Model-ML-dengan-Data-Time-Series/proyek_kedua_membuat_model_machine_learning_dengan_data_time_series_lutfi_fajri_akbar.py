# -*- coding: utf-8 -*-
"""Proyek_Kedua_Membuat_Model_Machine_Learning_dengan_Data_Time_Series_Lutfi_Fajri_Akbar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/109M-WI_2OJnm0jJIwIOwZvGM33H4DSHB

# Proyek Time Series Harga Alpukat dari 2015-2020

# Data Diri
### **Nama** : 
Lutfi Fajri Akbar
### **No. Register** :
1494037162101-2551
### **Username Dicoding**:
lutfifajri02
### **E-mail**:
ltfffajri@gmail.com

# Codelab
"""

!pip install Kaggle
!mkdir ~/.kaggle

!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d timmate/avocado-prices-2020

import zipfile, os

local_zip = '/content/avocado-prices-2020.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/avocado-prices-2020')
zip_ref.close()

import pandas as pd
df = pd.read_csv('/content/avocado-prices-2020/avocado-updated-2020.csv')
df.head(20)

df.info()

df_baru = df[["date","average_price"]]
df_baru.columns = ["tanggal", "harga_alpukat"]
df_baru.info()

df_baru['tanggal'] =  pd.to_datetime(df_baru['tanggal'], format='%Y/%m/%d')

tahun = df_baru[('tanggal')].values
harga = df_baru['harga_alpukat'].values

import matplotlib.pyplot as plt

plt.figure(figsize=(20,5))
plt.xlabel('Date')
plt.ylabel('Harga Rata-Rata')
plt.plot(tahun, harga)
plt.show()

tahun = df_baru[('tanggal')].values.astype("float64")

tahun_reshape = tahun.reshape(-1,1)
harga_reshape = harga.reshape(-1,1)

tahun_reshape

harga_reshape

from sklearn.preprocessing import StandardScaler

standard_scaler = StandardScaler()
tahun = standard_scaler.fit_transform(tahun_reshape)
harga = standard_scaler.fit_transform(harga_reshape)

tahun = tahun.flatten()
tahun

harga = harga.flatten()
harga

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(tahun, harga, test_size = 0.2, shuffle = False)

print(len(x_train))
print(len(x_test))

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)                            
    ds = tf.data.Dataset.from_tensor_slices(series)                                      
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)         
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))            
    ds = ds.shuffle(shuffle_buffer)                                     
    ds = ds.map(lambda w: (w[:-1], w[-1:]))                 
    return ds.batch(batch_size).prefetch(1)

import tensorflow as tf

train_set = windowed_dataset(y_train, window_size=30, batch_size=100, shuffle_buffer=1000)
val_test = windowed_dataset(y_test, window_size=30, batch_size=100, shuffle_buffer=1000)

from keras.layers import Dense
from keras.layers import LSTM, Bidirectional

model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(64, return_sequences=True),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.LSTM(64, return_sequences=True),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),
    tf.keras.layers.Dense(64, activation="relu"),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(32, activation="relu"),
    tf.keras.layers.Dense(10, activation="relu"),
    tf.keras.layers.Dense(1),
])

optimizer = tf.keras.optimizers.SGD(lr = 1.0000e-04, momentum = 0.9)

model.compile(loss = tf.keras.losses.Huber(),
              optimizer = optimizer,
              metrics = ["mae"])

threshold = (harga.max() - harga.min()) * 10/100
print(threshold)

riwayat_training_model = model.fit(train_set,
                                   epochs = 200,
                                   validation_data = val_test,
                                   verbose=2)

# Membuat plot akurasi dari model

import matplotlib.pyplot as plt

plt.plot(riwayat_training_model.history['mae'])
plt.plot(riwayat_training_model.history['val_mae'])
plt.title('MAE Model')
plt.ylabel('mae')
plt.xlabel('epoch ke-')
plt.legend(['train', 'test'], loc = 'upper right')
plt.show()

# Membuat plot loss dari model

import matplotlib.pyplot as plt

plt.plot(riwayat_training_model.history['loss'])
plt.plot(riwayat_training_model.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch ke-')
plt.legend(['train', 'test'], loc = 'upper right')
plt.show()

