# -*- coding: utf-8 -*-
"""Proyek_Akhir_Klasifikasi_Gambar_Lutfi_Fajri_Akbar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LX14koQ_31PVfrptep4ud_fxEZJ1kgJe

# Proyek Klasifikasi Gambar Batu, Gunting Kertas

# Data Diri
### **Nama** : 
Lutfi Fajri Akbar
### **No. Register** :
1494037162101-2551
### **Username Dicoding**:
lutfifajri02
### **E-mail**:
ltfffajri@gmail.com

# Code Lab
"""

# Memastikan versi Tensorflow yang digunakan

import tensorflow as tf
print(tf.__version__)

# Mengunduh dataset yang akan digunakan

!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
  -O /content/rockpaperscissors.zip

# Melakukan ekstraksi pada file rockpaperscissors.zip
import zipfile,os
local_zip = '/content/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

# Mendefinisikan nama direktori untuk data latih
base_dir = '/content/rockpaperscissors'
training_dir = os.path.join(base_dir, 'rps-cv-images')

print(training_dir)

os.listdir('/content/rockpaperscissors/rps-cv-images')

# Image Preprocessing dengan Augmentation dan sekaligus memisahkan data validation sebesar 40%
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                  rotation_range = 20,
                                  horizontal_flip = True,
                                  shear_range = 0.2,
                                  fill_mode = 'nearest',
                                  validation_split = 0.4)
                                      
validation_datagen = ImageDataGenerator(rescale = 1./255,
                                        validation_split = 0.4)

#  siapkan data latih dari kumpulan data gambar yang di-load dalam memori

training_generator = train_datagen.flow_from_directory(training_dir,
                                                       target_size = (150,150),
                                                       batch_size = 32,
                                                       class_mode = 'categorical',
                                                       subset = 'training' )

#  siapkan data validasi dari kumpulan data gambar yang di-load dalam memori

validation_generator = validation_datagen.flow_from_directory(training_dir, 
                                                              target_size = (150,150), 
                                                              batch_size = 32,
                                                              class_mode = 'categorical',
                                                              subset = 'validation')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(512, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.summary()

# compile model dengan 'adam' optimizer loss function 'binary_crossentropy' 
model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

# latih model dengan model.fit 
model.fit(
      training_generator,
      epochs=50, # tambahkan epochs jika akurasi model belum optimal
      validation_data=validation_generator, # menampilkan akurasi pengujian data validasi
      verbose=2)

print(training_generator.class_indices)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
 
uploaded = files.upload()
 
for fn in uploaded.keys():
 
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))
 
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])
 
  classes = model.predict(images, batch_size=10)
  classes =  np.argmax(classes)

   
  print(fn)
  if classes== 0:
   print('Terklasisifkasi "PAPER"')
  elif classes== 1:
   print('Terklasifikasi "ROCK"')
  else:
   print('Terklasifikasi "SCISSORS"')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
 
uploaded = files.upload()
 
for fn in uploaded.keys():
 
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))
 
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])
 
  classes = model.predict(images, batch_size=10)
  classes =  np.argmax(classes)

   
  print(fn)
  if classes== 0:
   print('Terklasisifkasi "PAPER"')
  elif classes== 1:
   print('Terklasifikasi "ROCK"')
  else:
   print('Terklasifikasi "SCISSORS"')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
 
uploaded = files.upload()
 
for fn in uploaded.keys():
 
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))
 
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])
 
  classes = model.predict(images, batch_size=10)
  classes =  np.argmax(classes)

   
  print(fn)
  if classes== 0:
   print('Terklasisifkasi "PAPER"')
  elif classes== 1:
   print('Terklasifikasi "ROCK"')
  else:
   print('Terklasifikasi "SCISSORS"')

